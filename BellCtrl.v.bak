module BellSet(
    input CP, nCR, EN, SetBellMode,
    input SetHourBellKey, SetMinuteBellKey,
    input [3:0] MinuteH, MinuteL,
    input [3:0] HourH, HourL,
    output reg [3:0] MinhBell, HouhBell,
    output reg [3:0] MinlBell, HoulBell
);
    wire MinL_CF, MinH_CF; // Carry Flag
    wire mlEN, mhEN, hEN; // EN of minute, hour bell
    wire [3:0]delta_mh, delta_ml, delta_hh, delta_hl;
    assign mlEN = EN && SetBellMode && SetMinuteBellKey;
    assign mhEN = EN && SetBellMode && SetMinuteBellKey && MinL_CF;
    assign hEN = EN && SetBellMode && ((SetMinuteBellKey && MinL_CF && MinH_CF)||SetHourBellKey);
    Counter10 BMin0(CP, nCR, mlEN, delta_ml, MinL_CF);
    Counter6 BMin1(CP, nCR, mhEN, delta_mh, MinH_CF);
    Counter12 BHou(CP, nCR, hEN, delta_hh, delta_hl);
    
    //here maybe remain some problems
    wire CF_m_add;
    always @ (posedge CP or posedge SetBellMode)
    begin
		if (SetBellMode) begin
			minuteAdd(CP, SetBellMode,
                      MinuteH, MinuteL, delta_mh, delta_ml,
                      MinhBell, MinlBell, CF_m_add);
			hourAdd(CP, SetBellMode, CF_m_add, HourH, HourL, delta_hh, delta_hl,
                    HouhBell, HoulBell);
        end
    end

endmodule

module BellAlarm(
    input CP, EN, SetBellMode, BellEn,
    input [3:0] CurMinh, CurMinl, CurHouh, CurHoul,
    input [3:0] BelMinh, BelMinl, BelHouh, BelHoul,
    output BellRadio
);
    // the bell rings for 1 minute
    assign BellRadio = CP&(EN&&BellEn&&(~SetBellMode)
        &&CurMinh==BelMinh
        &&CurMinl==BelMinl
        &&CurHouh==BelHouh
        &&CurHoul==BelHoul);
    //assign BellRadio = CP&(EN&&BellEn&&(~SetBellMode));
endmodule

module minuteAdd(
    input CP, SetBellMode,
    input [3:0] MinuteH, MinuteL, delta_mh, delta_ml,
    output [3:0] MinhBell, MinlBell, 
    output CF
);
    wire CF_ml;
    assign CF_ml = ((MinuteL + delta_ml) > 9);
    assign CF = ((CF_ml + MinuteH + delta_mh) > 5);
    always @ (posedge CP or posedge SetBellMode)
    begin
        if (CF_ml) MinlBell <= MinuteL + delta_ml - 4'ha;
        else MinlBell <= MinuteL + delta_ml;
        if (CF) MinhBell <= CF_ml + MinuteH + delta_mh - 4'h6;
        else MinhBell <= CF_ml + MinuteH + delta_mh
    end
    // wire CF_ml;
    // assign CF_ml = ((MinuteL + delta_ml) > 9);
    // assign MinlBell = CF_ml ? (MinuteL + delta_ml - 4'ha) : (MinuteL + delta_ml);
    // assign CF = ((CF_ml + MinuteH + delta_mh) > 5);
    // assign MinhBell = CF ? (CF_ml + MinuteH + delta_mh - 4'h6) : (CF_ml + MinuteH + delta_mh);
endmodule

module hourAdd(
    input CP, SetBellMode, Cin,
    input [3:0] HourH, HourL, delta_hh, delta_hl,
    output [3:0] HouhBell, HoulBell
);
    wire CF_hh0, CF_hl0, CF_hl1;
    assign CF_hh0 = (HourH==4'h0 && delta_hh==4'h0) || (HourH==4'h1 && delta_hh==4'h1); // 00 or 11
    assign CF_hl0 = CF_hh0 && (Cin + HourL + delta_hl <= 4'h9);
    assign CF_hl1 = CF_hh0 && (Cin + HourL + delta_hl > 4'h9);
    always @ (posedge CP or posedge SetBellMode)
    begin
        if (CF_hl0) begin
            HouhBell <= 4'h0;
            HoulBell <= Cin + HourL + delta_hl; // high==0 && ++<=9
        end
        else if (CF_hl1) begin
            HouhBell <= 4'h1;
            HoulBell <= Cin + HourL + delta_hl - 4'ha; // high==0 && ++>9
        end
        else if (Cin + HourL + delta_hl < 4'h2) begin
            HouhBell <= 4'h1;
            HoulBell <= Cin + HourL + delta_hl;  // high==1 && ++<2
        end
        else begin
            HouhBell <= 4'h0;
            HoulBell <= Cin + HourL + delta_hl - 4'h2; // high==1 && ++>=2
        end

    end
    // assign HoulBell = CF_hl0 ?
    //                   (Cin + HourL + delta_hl)  // high==0 && ++<=9
    //                   : (CF_hl1 ?
    //                   (Cin + HourL + delta_hl - 4'ha) // high==0 && ++>9
    //                   : ((Cin + HourL + delta_hl < 4'h2) ?
    //                   (Cin + HourL + delta_hl)  // high==1 && ++<2
    //                   :(Cin + HourL + delta_hl - 4'h2))); //high==1 && ++>=2
    // assign HouhBell = CF_hl0 ?
    //                   0 
    //                   : (CF_hl1 ?
    //                   1
    //                   : ((Cin + HourL + delta_hl < 4'h2) ?
    //                   1:0));
endmodule
